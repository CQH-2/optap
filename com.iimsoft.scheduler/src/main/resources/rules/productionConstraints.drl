package com.iimsoft.scheduler.rules
dialect "java"

import com.iimsoft.scheduler.domain.TaskPart
import com.iimsoft.scheduler.domain.Router
import com.iimsoft.scheduler.domain.Line
import com.iimsoft.scheduler.domain.LineShiftSlot
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder
import java.util.Set

global HardSoftScoreHolder scoreHolder

// 硬约束：选定槽位的产线必须支持所选工艺
rule "Line must support router"
when
    TaskPart(slot != null, router != null, $slot : slot, $router : router, eval(!$slot.getLine().supports($router)))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 硬约束：工艺必须支持该物料
rule "Router must support item"
when
    TaskPart(router != null, $router : router, $item : item, eval(!$router.supports($item)))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 硬约束：分片结束时间必须不超过槽位时间窗（使用影子变量 endIndex）
rule "Task part must fit inside its slot window"
when
    TaskPart(slot != null, $slot : slot, $end : endIndex, eval($end != null && $end > $slot.getEndIndex()))
then
    int over = (int)($end - $slot.getEndIndex());
    scoreHolder.addHardConstraintMatch(kcontext, -over);
end

// 硬约束：槽位分钟容量不能超（sum(requiredMinutes) ≤ slot.durationMinutes）
rule "Slot time capacity must not be exceeded"
when
    $slot : LineShiftSlot()
    $sum : Number() from accumulate(
        TaskPart(slot == $slot, $req : requiredMinutes),
        sum($req)
    )
    eval($sum.intValue() > $slot.getDurationMinutes())
then
    int duration = $slot.getDurationMinutes();
    int over = $sum.intValue() - duration;
    scoreHolder.addHardConstraintMatch(kcontext, -over);
end

// 允许混工艺：移除“Single router per slot (no mixing within a slot)”硬约束

// 软约束：交期迟期惩罚（用分片自身结束时间）
rule "Minimize tardiness (due date)"
when
    TaskPart(slot != null, $end : endIndex, $due : task.dueEndIndexMinutes)
    eval($end != null && $due != null && $end > $due.longValue())
then
    int late = (int)($end - $due.longValue());
    scoreHolder.addSoftConstraintMatch(kcontext, -late);
end

// 软约束：夜班惩罚
rule "Penalize night shift usage"
when
    TaskPart(slot != null, $startMin : slot.startMinuteOfDay, eval($startMin >= (18 * 60)))
then
    scoreHolder.addSoftConstraintMatch(kcontext, -100);
end

// 软约束：同一条产线的负载尽量均衡（平方惩罚）
rule "Balance line load"
when
    $line : Line()
    $sum : Number() from accumulate(
        TaskPart(slot != null, $line == getLine(), $q : quantity),
        sum($q)
    )
then
    int load = $sum.intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, -(load * load));
end