package com.iimsoft.scheduler.rules
dialect "java"

import com.iimsoft.scheduler.domain.HourPlan
import com.iimsoft.scheduler.domain.Line
import com.iimsoft.scheduler.domain.Requirement
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder

global HardSoftScoreHolder scoreHolder

// 硬约束：无物料时数量必须为 0（修正绑定写法）
rule "Zero quantity when no item"
when
    HourPlan(item == null, $q : quantity)
    eval($q != null && $q.intValue() > 0)
then
    scoreHolder.addHardConstraintMatch(kcontext, -$q.intValue());
end

// 新增硬约束：有物料则数量必须 > 0；数量 <= 0 时不能安排物料
rule "Item requires positive quantity"
when
    HourPlan(item != null, $q : quantity)
    eval($q == null || $q.intValue() <= 0)
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 硬约束：产线必须支持该物料
rule "Line must support item"
when
    HourPlan(item != null, $line : slot.line, $item : item, eval(!$line.supportsItem($item)))
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 硬约束：小时容量不能超（数量 × 分钟/件 ≤ 60）
rule "Hour capacity must not be exceeded"
when
    $hp : HourPlan($reqMin : requiredMinutes, slot != null, $slot : slot, eval($reqMin > $slot.getDurationMinutes()))
then
    int over = $hp.getRequiredMinutes() - $slot.getDurationMinutes();
    scoreHolder.addHardConstraintMatch(kcontext, -over);
end

// 硬约束：按交期满足需求（到期前累积产出必须 ≥ 需求）
rule "Satisfy requirements by due date"
when
    $req : Requirement($item : item, $due : dueEndIndexMinutes, $need : quantity)
    $sum : Number() from accumulate(
        HourPlan(item == $item, $q : quantity, $end : endIndex,
                 eval($q != null && $q.intValue() > 0 && $end != null && $end.longValue() <= $due.longValue())),
        sum($q)
    )
    eval($sum.intValue() < $need)
then
    int shortage = $req.getQuantity() - $sum.intValue();
    scoreHolder.addHardConstraintMatch(kcontext, -shortage);
end

// 软约束：夜间（18:00 及以后）生产惩罚
rule "Penalize night hours"
when
    HourPlan(item != null, quantity != null, eval(quantity.intValue() > 0),
             $startMin : slot.startMinuteOfDay, eval($startMin >= (18 * 60)))
then
    scoreHolder.addSoftConstraintMatch(kcontext, -100);
end

// 软约束：同一条产线的负载尽量均衡（平方惩罚）
rule "Balance line load"
when
    $line : Line()
    $sum : Number() from accumulate(
        HourPlan(slot.line == $line, quantity != null, $q : quantity),
        sum($q)
    )
then
    int load = $sum.intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, -(load * load));
end